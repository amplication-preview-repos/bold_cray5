/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BlogArticleService } from "../blogArticle.service";
import { BlogArticleCreateInput } from "./BlogArticleCreateInput";
import { BlogArticle } from "./BlogArticle";
import { BlogArticleFindManyArgs } from "./BlogArticleFindManyArgs";
import { BlogArticleWhereUniqueInput } from "./BlogArticleWhereUniqueInput";
import { BlogArticleUpdateInput } from "./BlogArticleUpdateInput";

export class BlogArticleControllerBase {
  constructor(protected readonly service: BlogArticleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BlogArticle })
  async createBlogArticle(
    @common.Body() data: BlogArticleCreateInput
  ): Promise<BlogArticle> {
    return await this.service.createBlogArticle({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BlogArticle] })
  @ApiNestedQuery(BlogArticleFindManyArgs)
  async blogArticles(@common.Req() request: Request): Promise<BlogArticle[]> {
    const args = plainToClass(BlogArticleFindManyArgs, request.query);
    return this.service.blogArticles({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BlogArticle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async blogArticle(
    @common.Param() params: BlogArticleWhereUniqueInput
  ): Promise<BlogArticle | null> {
    const result = await this.service.blogArticle({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BlogArticle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBlogArticle(
    @common.Param() params: BlogArticleWhereUniqueInput,
    @common.Body() data: BlogArticleUpdateInput
  ): Promise<BlogArticle | null> {
    try {
      return await this.service.updateBlogArticle({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BlogArticle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBlogArticle(
    @common.Param() params: BlogArticleWhereUniqueInput
  ): Promise<BlogArticle | null> {
    try {
      return await this.service.deleteBlogArticle({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
