/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, PracticeInfo as PrismaPracticeInfo } from "@prisma/client";

export class PracticeInfoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PracticeInfoCountArgs, "select">
  ): Promise<number> {
    return this.prisma.practiceInfo.count(args);
  }

  async practiceInfos(
    args: Prisma.PracticeInfoFindManyArgs
  ): Promise<PrismaPracticeInfo[]> {
    return this.prisma.practiceInfo.findMany(args);
  }
  async practiceInfo(
    args: Prisma.PracticeInfoFindUniqueArgs
  ): Promise<PrismaPracticeInfo | null> {
    return this.prisma.practiceInfo.findUnique(args);
  }
  async createPracticeInfo(
    args: Prisma.PracticeInfoCreateArgs
  ): Promise<PrismaPracticeInfo> {
    return this.prisma.practiceInfo.create(args);
  }
  async updatePracticeInfo(
    args: Prisma.PracticeInfoUpdateArgs
  ): Promise<PrismaPracticeInfo> {
    return this.prisma.practiceInfo.update(args);
  }
  async deletePracticeInfo(
    args: Prisma.PracticeInfoDeleteArgs
  ): Promise<PrismaPracticeInfo> {
    return this.prisma.practiceInfo.delete(args);
  }
}
