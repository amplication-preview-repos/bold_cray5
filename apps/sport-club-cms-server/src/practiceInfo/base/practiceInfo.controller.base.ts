/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PracticeInfoService } from "../practiceInfo.service";
import { PracticeInfoCreateInput } from "./PracticeInfoCreateInput";
import { PracticeInfo } from "./PracticeInfo";
import { PracticeInfoFindManyArgs } from "./PracticeInfoFindManyArgs";
import { PracticeInfoWhereUniqueInput } from "./PracticeInfoWhereUniqueInput";
import { PracticeInfoUpdateInput } from "./PracticeInfoUpdateInput";

export class PracticeInfoControllerBase {
  constructor(protected readonly service: PracticeInfoService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PracticeInfo })
  async createPracticeInfo(
    @common.Body() data: PracticeInfoCreateInput
  ): Promise<PracticeInfo> {
    return await this.service.createPracticeInfo({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PracticeInfo] })
  @ApiNestedQuery(PracticeInfoFindManyArgs)
  async practiceInfos(@common.Req() request: Request): Promise<PracticeInfo[]> {
    const args = plainToClass(PracticeInfoFindManyArgs, request.query);
    return this.service.practiceInfos({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PracticeInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async practiceInfo(
    @common.Param() params: PracticeInfoWhereUniqueInput
  ): Promise<PracticeInfo | null> {
    const result = await this.service.practiceInfo({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PracticeInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePracticeInfo(
    @common.Param() params: PracticeInfoWhereUniqueInput,
    @common.Body() data: PracticeInfoUpdateInput
  ): Promise<PracticeInfo | null> {
    try {
      return await this.service.updatePracticeInfo({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PracticeInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePracticeInfo(
    @common.Param() params: PracticeInfoWhereUniqueInput
  ): Promise<PracticeInfo | null> {
    try {
      return await this.service.deletePracticeInfo({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
