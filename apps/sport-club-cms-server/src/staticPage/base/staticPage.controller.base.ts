/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StaticPageService } from "../staticPage.service";
import { StaticPageCreateInput } from "./StaticPageCreateInput";
import { StaticPage } from "./StaticPage";
import { StaticPageFindManyArgs } from "./StaticPageFindManyArgs";
import { StaticPageWhereUniqueInput } from "./StaticPageWhereUniqueInput";
import { StaticPageUpdateInput } from "./StaticPageUpdateInput";

export class StaticPageControllerBase {
  constructor(protected readonly service: StaticPageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StaticPage })
  async createStaticPage(
    @common.Body() data: StaticPageCreateInput
  ): Promise<StaticPage> {
    return await this.service.createStaticPage({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [StaticPage] })
  @ApiNestedQuery(StaticPageFindManyArgs)
  async staticPages(@common.Req() request: Request): Promise<StaticPage[]> {
    const args = plainToClass(StaticPageFindManyArgs, request.query);
    return this.service.staticPages({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StaticPage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async staticPage(
    @common.Param() params: StaticPageWhereUniqueInput
  ): Promise<StaticPage | null> {
    const result = await this.service.staticPage({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StaticPage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStaticPage(
    @common.Param() params: StaticPageWhereUniqueInput,
    @common.Body() data: StaticPageUpdateInput
  ): Promise<StaticPage | null> {
    try {
      return await this.service.updateStaticPage({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StaticPage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStaticPage(
    @common.Param() params: StaticPageWhereUniqueInput
  ): Promise<StaticPage | null> {
    try {
      return await this.service.deleteStaticPage({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
