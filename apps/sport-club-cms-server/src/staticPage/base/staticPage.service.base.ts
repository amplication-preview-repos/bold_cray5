/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, StaticPage as PrismaStaticPage } from "@prisma/client";

export class StaticPageServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StaticPageCountArgs, "select">
  ): Promise<number> {
    return this.prisma.staticPage.count(args);
  }

  async staticPages(
    args: Prisma.StaticPageFindManyArgs
  ): Promise<PrismaStaticPage[]> {
    return this.prisma.staticPage.findMany(args);
  }
  async staticPage(
    args: Prisma.StaticPageFindUniqueArgs
  ): Promise<PrismaStaticPage | null> {
    return this.prisma.staticPage.findUnique(args);
  }
  async createStaticPage(
    args: Prisma.StaticPageCreateArgs
  ): Promise<PrismaStaticPage> {
    return this.prisma.staticPage.create(args);
  }
  async updateStaticPage(
    args: Prisma.StaticPageUpdateArgs
  ): Promise<PrismaStaticPage> {
    return this.prisma.staticPage.update(args);
  }
  async deleteStaticPage(
    args: Prisma.StaticPageDeleteArgs
  ): Promise<PrismaStaticPage> {
    return this.prisma.staticPage.delete(args);
  }
}
