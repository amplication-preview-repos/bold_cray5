/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Seo } from "./Seo";
import { SeoCountArgs } from "./SeoCountArgs";
import { SeoFindManyArgs } from "./SeoFindManyArgs";
import { SeoFindUniqueArgs } from "./SeoFindUniqueArgs";
import { DeleteSeoArgs } from "./DeleteSeoArgs";
import { SeoService } from "../seo.service";
@graphql.Resolver(() => Seo)
export class SeoResolverBase {
  constructor(protected readonly service: SeoService) {}

  async _seosMeta(
    @graphql.Args() args: SeoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Seo])
  async seos(@graphql.Args() args: SeoFindManyArgs): Promise<Seo[]> {
    return this.service.seos(args);
  }

  @graphql.Query(() => Seo, { nullable: true })
  async seo(@graphql.Args() args: SeoFindUniqueArgs): Promise<Seo | null> {
    const result = await this.service.seo(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Seo)
  async deleteSeo(@graphql.Args() args: DeleteSeoArgs): Promise<Seo | null> {
    try {
      return await this.service.deleteSeo(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
