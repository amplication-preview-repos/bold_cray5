/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SeoService } from "../seo.service";
import { SeoCreateInput } from "./SeoCreateInput";
import { Seo } from "./Seo";
import { SeoFindManyArgs } from "./SeoFindManyArgs";
import { SeoWhereUniqueInput } from "./SeoWhereUniqueInput";
import { SeoUpdateInput } from "./SeoUpdateInput";

export class SeoControllerBase {
  constructor(protected readonly service: SeoService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Seo })
  async createSeo(@common.Body() data: SeoCreateInput): Promise<Seo> {
    return await this.service.createSeo({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Seo] })
  @ApiNestedQuery(SeoFindManyArgs)
  async seos(@common.Req() request: Request): Promise<Seo[]> {
    const args = plainToClass(SeoFindManyArgs, request.query);
    return this.service.seos({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Seo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async seo(@common.Param() params: SeoWhereUniqueInput): Promise<Seo | null> {
    const result = await this.service.seo({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Seo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSeo(
    @common.Param() params: SeoWhereUniqueInput,
    @common.Body() data: SeoUpdateInput
  ): Promise<Seo | null> {
    try {
      return await this.service.updateSeo({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Seo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSeo(
    @common.Param() params: SeoWhereUniqueInput
  ): Promise<Seo | null> {
    try {
      return await this.service.deleteSeo({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
